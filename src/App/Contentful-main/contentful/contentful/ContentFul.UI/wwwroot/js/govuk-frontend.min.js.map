{
  "version": 3,
  "sources": ["../../node_modules/govuk-frontend/src/govuk/common/govuk-frontend-version.mjs", "../../node_modules/govuk-frontend/src/govuk/common/index.mjs", "../../node_modules/govuk-frontend/src/govuk/common/normalise-dataset.mjs", "../../node_modules/govuk-frontend/src/govuk/errors/index.mjs", "../../node_modules/govuk-frontend/src/govuk/govuk-frontend-component.mjs", "../../node_modules/govuk-frontend/src/govuk/i18n.mjs", "../../node_modules/govuk-frontend/src/govuk/components/accordion/accordion.mjs", "../../node_modules/govuk-frontend/src/govuk/components/button/button.mjs", "../../node_modules/govuk-frontend/src/govuk/common/closest-attribute-value.mjs", "../../node_modules/govuk-frontend/src/govuk/components/character-count/character-count.mjs", "../../node_modules/govuk-frontend/src/govuk/components/checkboxes/checkboxes.mjs", "../../node_modules/govuk-frontend/src/govuk/components/error-summary/error-summary.mjs", "../../node_modules/govuk-frontend/src/govuk/components/exit-this-page/exit-this-page.mjs", "../../node_modules/govuk-frontend/src/govuk/components/header/header.mjs", "../../node_modules/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs", "../../node_modules/govuk-frontend/src/govuk/components/radios/radios.mjs", "../../node_modules/govuk-frontend/src/govuk/components/skip-link/skip-link.mjs", "../../node_modules/govuk-frontend/src/govuk/components/tabs/tabs.mjs", "../../node_modules/govuk-frontend/src/govuk/all.mjs"],
  "sourcesContent": ["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * GOV.UK Frontend release version\n *\n * {@link https://github.com/alphagov/govuk-frontend/releases}\n */\nexport const version = 'development'\n", "/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config object to merge\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs(...configObjects) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @internal\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  function flattenObject(configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @internal\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    function flattenLoop(obj, prefix) {\n      for (const [key, value] of Object.entries(obj)) {\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n\n        // If the value is a nested object, recurse over that too\n        if (value && typeof value === 'object') {\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    const obj = flattenObject(configObject)\n\n    // Push their keys one-by-one into formattedConfigObject. Any duplicate\n    // keys will override the existing key with the new value.\n    for (const [key, value] of Object.entries(obj)) {\n      formattedConfigObject[key] = value\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @internal\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(configObject, namespace) {\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const [key, value] of Object.entries(configObject)) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    // Check if the first namespace matches the configured namespace\n    if (keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n\n      // Add them to our new object\n      newObject[newKey] = value\n    }\n  }\n\n  return newObject\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    for (const { required, errorMessage } of conditions) {\n      if (!required.every((key) => !!config[key])) {\n        errors.push(errorMessage) // Missing config key value\n      }\n    }\n\n    // Check one condition passes or add errors\n    if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n      validationErrors.push(...errors)\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n", "/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duck…' 🦆\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {string | undefined} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @internal\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: string | boolean | number | undefined }} Normalised dataset\n */\nexport function normaliseDataset(dataset) {\n  /** @type {ReturnType<typeof normaliseDataset>} */\n  const out = {}\n\n  for (const [key, value] of Object.entries(dataset)) {\n    out[key] = normaliseString(value)\n  }\n\n  return out\n}\n", "/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { componentName, identifier, element, expectedType } =\n        messageOrOptions\n\n      // Add prefix and identifier\n      message = `${componentName}: ${identifier}`\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} componentName - The name of the component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n", "import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n", "/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(\n        lookupKey,\n        options.count\n      )}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      }\n\n      return translationString\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10–12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form – if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      console.warn(\n        `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n      )\n\n      return 'other'\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n", "import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n */\nexport class Accordion extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {AccordionConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /** @private */\n  browserSupportsSessionStorage = false\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Accordion.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n\n    const $sections = this.$module.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage()\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$module.insertBefore($accordionControls, this.$module.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          componentName: 'Accordion',\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$module.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.nodeName !== 'id') {\n        $button.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    $headingTextFocus.innerHTML = $span.innerHTML\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary?.parentNode) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n\n      // Copy original contents of summary to the new summary span\n      $summarySpanFocus.innerHTML = $summary.innerHTML\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.parentNode.replaceChild($summarySpan, $summary)\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const expanded = this.isExpanded($section)\n    this.setExpanded(!expanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.checkIfAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push(`${$headingText.textContent}`.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push(`${$summary.textContent}`.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  checkIfAllSectionsOpen() {\n    const sectionsCount = this.$sections.length\n    const expandedSectionCount = this.$module.querySelectorAll(\n      `.${this.sectionExpandedClass}`\n    ).length\n    const areAllSectionsOpen = sectionsCount === expandedSectionCount\n\n    return areAllSectionsOpen\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  storeState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      // We need a unique way of identifying each content in the Accordion.\n      // Since an `#id` should be unique and an `id` is required for `aria-`\n      // attributes `id` can be safely used.\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = $button.getAttribute('aria-expanded')\n\n        // Only set the state when both `contentId` and `contentState` are taken\n        // from the DOM.\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState)\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = contentId\n          ? window.sessionStorage.getItem(contentId)\n          : null\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section)\n        }\n      }\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.innerHTML = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n}\n\nconst helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    const testString = 'this is the test string'\n    let result\n    try {\n      window.sessionStorage.setItem(testString, testString)\n      result =\n        window.sessionStorage.getItem(testString) === testString.toString()\n      window.sessionStorage.removeItem(testString)\n      return result\n    } catch (exception) {\n      return false\n    }\n  }\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n", "import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\nconst KEY_SPACE = 32\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n */\nexport class Button extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ButtonConfig}\n   */\n  config\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Button',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Button.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.$module.addEventListener('keydown', (event) =>\n      this.handleKeyDown(event)\n    )\n    this.$module.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can use the space bar to activate\n   * things with the 'button' role, so we need to match the functionality of\n   * native HTML buttons.\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.keyCode !== KEY_SPACE) {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n", "/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  extractConfigByNamespace,\n  mergeConfigs,\n  validateConfig\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n */\nexport class CharacterCount extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength\n\n  /**\n   * @param {Element | null} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset($module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change\n    // the type of count, we need to reset the `maxlength` and `maxwords` from\n    // the JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config,\n      configOverrides,\n      datasetConfig\n    )\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(`Character count: ${errors[0]}`)\n    }\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (`${$textareaDescription.textContent}`.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n", "import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block\n   * – for example, a checkbox for 'Phone' could reveal an additional form field\n   * for the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the checkbox state.\n   *\n   * @param {Element | null} $module - HTML element to use for checkboxes\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Checkboxes',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $inputs = $module.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        componentName: 'Checkboxes',\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          componentName: 'Checkboxes',\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if (\n      $target &&\n      $target.classList.contains('govuk-checkboxes__conditional')\n    ) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive'\n   * behaviour, and uncheck them. This helps prevent someone checking both a\n   * regular checkbox and a \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module – if the click occurred on a checkbox,\n   * sync the state of any associated conditional reveal with the checkbox\n   * state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n", "import {\n  getFragmentFromUrl,\n  mergeConfigs,\n  setFocus\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in\n * configuration.\n *\n * @preserve\n */\nexport class ErrorSummary extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ErrorSummaryConfig}\n   */\n  config\n\n  /**\n   * @param {Element | null} $module - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Error summary',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      ErrorSummary.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$module)\n    }\n\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldset’s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n", "import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n */\nexport class ExitThisPage extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another key—so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (\n      (event.key === 'Shift' || event.keyCode === 16 || event.which === 16) &&\n      !this.lastKeyWasModified\n    ) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n", "import { getBreakpoint } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to big and\n   * back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the\n   * browser viewport moves between states.\n   *\n   * @param {Element | null} $module - HTML element to use for header\n   */\n  constructor($module) {\n    super()\n\n    if (!$module) {\n      throw new ElementError({\n        componentName: 'Header',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n    const $menuButton = $module.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        componentName: 'Header',\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-header-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        componentName: 'Header',\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('desktop')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        componentName: 'Header',\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n", "import { mergeConfigs, setFocus } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n */\nexport class NotificationBanner extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {NotificationBannerConfig}\n   */\n  config\n\n  /**\n   * @param {Element | null} $module - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Notification banner',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      NotificationBanner.defaults,\n      config,\n      normaliseDataset($module.dataset)\n    )\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$module.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$module)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` – in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n", "import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block –\n   * for example, a radio for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the radio state.\n   *\n   * @param {Element | null} $module - HTML element to use for radios\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Radios',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $inputs = $module.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        componentName: 'Radios',\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          componentName: 'Radios',\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module – if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a\n   * radio in another $module)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n", "import { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n */\nexport class SkipLink extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @param {Element | null} $module - HTML element to use for skip link\n   * @throws {ElementError} when $module is not set or the wrong type\n   * @throws {ElementError} when $module.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        componentName: 'Skip link',\n        element: $module,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    const hash = this.$module.hash\n    const href = this.$module.getAttribute('href') ?? ''\n\n    /** @type {URL | undefined} */\n    let url\n\n    /**\n     * Check for valid link URL\n     *\n     * {@link https://caniuse.com/url}\n     * {@link https://url.spec.whatwg.org}\n     *\n     */\n    try {\n      url = new window.URL(this.$module.href)\n    } catch (error) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) is invalid`\n      )\n    }\n\n    // Return early for external URLs or links to other pages\n    if (\n      url.origin !== window.location.origin ||\n      url.pathname !== window.location.pathname\n    ) {\n      return\n    }\n\n    const linkedElementId = getFragmentFromUrl(hash)\n\n    // Check link path matching current page\n    if (!linkedElementId) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`\n      )\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!$linkedElement) {\n      throw new ElementError({\n        componentName: 'Skip link',\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$module.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('govuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('govuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n", "import { getBreakpoint, getFragmentFromUrl } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  keys = { left: 37, right: 39, up: 38, down: 40 }\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for tabs\n   */\n  constructor($module) {\n    super()\n\n    if (!$module) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $tabs = $module.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'Links (`<a class=\"govuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$module.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$module.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'List (`<ul class=\"govuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'List items (`<li class=\"govuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$module.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return\n    }\n\n    // Set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // Set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id so the page doesn't jump when a user clicks a tab\n    // (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.keyCode) {\n      case this.keys.left:\n      case this.keys.up:\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case this.keys.right:\n      case this.keys.down:\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return null\n    }\n\n    return this.$module.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$module.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n", "/* eslint-disable no-new */\n\nimport { version } from './common/govuk-frontend-version.mjs'\nimport { isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config & { scope?: Element }} [config] - Config for all components (with optional scope)\n */\nfunction initAll(config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    console.log(new SupportError())\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [Radios],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  const $scope = config.scope ?? document\n\n  components.forEach(([Component, config]) => {\n    const $elements = $scope.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n\n    $elements.forEach(($element) => {\n      try {\n        // Only pass config to components that accept it\n        'defaults' in Component\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  })\n}\n\nexport {\n  initAll,\n  version,\n\n  // Components\n  Accordion,\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  ExitThisPage,\n  Header,\n  NotificationBanner,\n  Radios,\n  SkipLink,\n  Tabs\n}\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n */\n\n/**\n * Config for individual components\n *\n * @typedef {import('./components/accordion/accordion.mjs').AccordionConfig} AccordionConfig\n * @typedef {import('./components/accordion/accordion.mjs').AccordionTranslations} AccordionTranslations\n * @typedef {import('./components/button/button.mjs').ButtonConfig} ButtonConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountConfig} CharacterCountConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountTranslations} CharacterCountTranslations\n * @typedef {import('./components/error-summary/error-summary.mjs').ErrorSummaryConfig} ErrorSummaryConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageConfig} ExitThisPageConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageTranslations} ExitThisPageTranslations\n * @typedef {import('./components/notification-banner/notification-banner.mjs').NotificationBannerConfig} NotificationBannerConfig\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Config} ConfigKey\n */\n"],
  "mappings": "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",
  "names": ["version", "mergeConfigs", "configObjects", "flattenObject", "configObject", "flattenedObject", "flattenLoop", "obj", "prefix", "key", "value", "Object", "entries", "prefixedKey", "formattedConfigObject", "extractConfigByNamespace", "namespace", "newObject", "keyParts", "split", "length", "shift", "join", "getFragmentFromUrl", "url", "includes", "pop", "getBreakpoint", "name", "property", "window", "getComputedStyle", "document", "documentElement", "getPropertyValue", "undefined", "setFocus", "$element", "options", "_options$onBeforeFocu", "isFocusable", "getAttribute", "onBlur", "_options$onBlur", "call", "removeAttribute", "setAttribute", "addEventListener", "once", "onBeforeFocus", "focus", "isSupported", "$scope", "body", "classList", "contains", "normaliseString", "trimmedValue", "trim", "isFinite", "Number", "normaliseDataset", "dataset", "out", "GOVUKFrontendError", "Error", "constructor", "args", "super", "this", "SupportError", "supportMessage", "HTMLScriptElement", "prototype", "ConfigError", "ElementError", "messageOrOptions", "message", "componentName", "identifier", "element", "expectedType", "GOVUKFrontendComponent", "checkSupport", "I18n", "translations", "config", "_config$locale", "locale", "lang", "t", "lookupKey", "count", "getPluralSuffix", "translationString", "match", "replacePlaceholders", "formatter", "Intl", "NumberFormat", "supportedLocalesOf", "replace", "placeholderWithBraces", "placeholderKey", "hasOwnProperty", "placeholderValue", "format", "hasIntlPluralRulesSupport", "Boolean", "PluralRules", "preferredForm", "select", "selectPluralFormUsingFallbackRules", "console", "warn", "Math", "abs", "floor", "ruleset", "getPluralRulesForLocale", "pluralRules", "localeShort", "pluralRule", "pluralRulesMap", "languages", "arabic", "chinese", "french", "german", "irish", "russian", "scottish", "spanish", "welsh", "n", "lastTwo", "last", "Accordion", "$module", "i18n", "controlsClass", "showAllClass", "showAllTextClass", "sectionClass", "sectionExpandedClass", "sectionButtonClass", "sectionHeaderClass", "sectionHeadingClass", "sectionHeadingDividerClass", "sectionHeadingTextClass", "sectionHeadingTextFocusClass", "sectionShowHideToggleClass", "sectionShowHideToggleFocusClass", "sectionShowHideTextClass", "upChevronIconClass", "downChevronIconClass", "sectionSummaryClass", "sectionSummaryFocusClass", "sectionContentClass", "$sections", "browserSupportsSessionStorage", "$showAllButton", "$showAllIcon", "$showAllText", "HTMLElement", "defaults", "querySelectorAll", "helper", "checkForSessionStorage", "initControls", "initSectionHeaders", "areAllSectionsOpen", "checkIfAllSectionsOpen", "updateShowAllButton", "createElement", "add", "appendChild", "$accordionControls", "insertBefore", "firstChild", "onShowOrHideAllToggle", "event", "onBeforeMatch", "forEach", "$section", "i", "$header", "querySelector", "constructHeaderMarkup", "setExpanded", "isExpanded", "onSectionToggle", "setInitialState", "index", "$span", "$heading", "$summary", "$button", "id", "attr", "Array", "from", "attributes", "nodeName", "nodeValue", "$headingText", "$headingTextFocus", "innerHTML", "$showHideToggle", "$showHideToggleFocus", "$showHideText", "$showHideIcon", "getButtonPunctuationEl", "parentNode", "$summarySpan", "$summarySpanFocus", "replaceChild", "removeChild", "$fragment", "target", "Element", "closest", "expanded", "storeState", "nowExpanded", "$content", "newButtonText", "textContent", "ariaLabelParts", "push", "ariaLabelMessage", "remove", "toString", "toggle", "rememberExpanded", "contentId", "contentState", "sessionStorage", "setItem", "getItem", "$punctuationEl", "moduleName", "freeze", "hideAllSections", "hideSection", "hideSectionAriaLabel", "showAllSections", "showSection", "showSectionAriaLabel", "testString", "result", "removeItem", "exception", "Button", "debounceFormSubmitTimer", "handleKeyDown", "debounce", "$target", "keyCode", "preventDefault", "click", "preventDoubleClick", "setTimeout", "DEBOUNCE_TIMEOUT_IN_SECONDS", "closestAttributeValue", "attributeName", "$closestElementWithAttribute", "CharacterCount", "_ref", "_this$config$maxwords", "$textarea", "$visibleCountMessage", "$screenReaderCountMessage", "lastInputTimestamp", "lastInputValue", "valueChecker", "maxLength", "HTMLTextAreaElement", "HTMLInputElement", "datasetConfig", "configOverrides", "maxlength", "maxwords", "errors", "schema", "validationErrors", "conditions", "required", "errorMessage", "every", "Infinity", "textareaDescriptionId", "$textareaDescription", "getElementById", "insertAdjacentElement", "className", "bindChangeEvents", "updateCountMessage", "handleKeyUp", "handleFocus", "handleBlur", "updateVisibleCountMessage", "Date", "now", "setInterval", "updateIfValueChanged", "clearInterval", "updateScreenReaderCountMessage", "isError", "isOverThreshold", "getCountMessage", "text", "_text$match", "remainingNumber", "countType", "formatCountMessage", "translationKeySuffix", "threshold", "currentLength", "charactersUnderLimit", "one", "other", "charactersAtLimit", "charactersOverLimit", "wordsUnderLimit", "wordsAtLimit", "wordsOverLimit", "textareaDescription", "anyOf", "Checkboxes", "$inputs", "$input", "targetId", "syncAllConditionalReveals", "handleClick", "syncConditionalRevealWithInputState", "inputIsChecked", "checked", "unCheckAllInputsExcept", "$inputWithSameName", "form", "unCheckExclusiveInputs", "$exclusiveInput", "$clickedInput", "type", "ErrorSummary", "disableAutoFocus", "focusTarget", "HTMLAnchorElement", "inputId", "href", "$legendOrLabel", "getAssociatedLegendOrLabel", "scrollIntoView", "preventScroll", "_document$querySelect", "$fieldset", "$legends", "getElementsByTagName", "$candidateLegend", "legendTop", "getBoundingClientRect", "top", "inputRect", "height", "innerHeight", "ExitThisPage", "$skiplinkButton", "$updateSpan", "$indicatorContainer", "$overlay", "keypressCounter", "lastKeyWasModified", "timeoutTime", "keypressTimeoutId", "timeoutMessageId", "buildIndicator", "initUpdateSpan", "initButtonClickHandler", "handleKeypress", "bind", "govukFrontendExitThisPageKeypress", "resetPage", "$indicator", "updateIndicator", "exitPage", "location", "which", "resetKeypressTimer", "clearTimeout", "setKeypressTimer", "shiftKey", "activated", "timedOut", "pressTwoMoreTimes", "pressOneMoreTime", "Header", "$menuButton", "$menu", "menuIsOpen", "mql", "menuId", "setupResponsiveChecks", "handleMenuButtonClick", "breakpoint", "matchMedia", "checkMode", "addListener", "matches", "NotificationBanner", "Radios", "$allInputs", "$clickedInputForm", "$clickedInputName", "hasSameFormOwner", "SkipLink", "_this$$module$getAttr", "hash", "URL", "error", "origin", "pathname", "linkedElementId", "$linkedElement", "Tabs", "$tabs", "$tabList", "$tabListItems", "keys", "left", "right", "up", "down", "jsHiddenClass", "changingHash", "boundTabClick", "boundTabKeydown", "boundOnHashChange", "onTabClick", "onTabKeydown", "onHashChange", "_this$mql", "setup", "teardown", "_this$getTab", "$item", "$tab", "setAttributes", "hideTab", "$activeTab", "getTab", "showTab", "removeEventListener", "unsetAttributes", "$tabWithHash", "$previousTab", "getCurrentTab", "unhighlightTab", "hidePanel", "highlightTab", "showPanel", "panelId", "$panel", "getPanel", "$currentTab", "$nextTab", "currentTarget", "createHistoryEntry", "activatePreviousTab", "activateNextTab", "parentElement", "$nextTabListItem", "nextElementSibling", "$previousTabListItem", "previousElementSibling", "initAll", "_config$scope", "log", "components", "accordion", "button", "characterCount", "errorSummary", "exitThisPage", "notificationBanner", "scope", "Component"]
}
